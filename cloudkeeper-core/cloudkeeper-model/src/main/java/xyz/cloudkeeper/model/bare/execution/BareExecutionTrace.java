package xyz.cloudkeeper.model.bare.execution;

/**
 * Representation of a CloudKeeper <em>call stack</em> and a <em>value reference</em>, or elements thereof.
 *
 * <p>It is a requirement that {@link #toString()} returns a string representation according to the contract of this
 * interface (since this is a primitive interface, no default implementation is provided).
 *
 * <p>Conceptually, an execution trace is a derivation of the following (ambiguous) grammar with start symbol
 * {@code trace} and terminals {@code identifier}, {@code index}, {@code content}, {@code in}, {@code out}. Instances of
 * this interface are <strong>not</strong> required to encode the entire derivation. Instead, they only need to encode
 * the final string of terminals. Only with contextual information (specifically, CloudKeeper runtime state like the
 * call stack, modules and ports), the derivation tree can be reconstructed from the string.
 *
 * <p>{@code
 * trace ::= [content] (frame content)* [frame [reference]] | reference | array-index+
 * frame ::= module | iteration
 * reference ::= port array-index*
 * array-index ::= index
 * module ::= identifier
 * iteration ::= index
 * port ::= in-port | out-port
 * in-port ::= identifier
 * out-port ::= identifier
 * }
 */
public interface BareExecutionTrace {
    /**
     * Returns a string representation of this execution trace.
     *
     * <p>The string must be contained in the language generated by the following (unambiguous) context-free grammar
     * with start symbol {@code trace} (no whitespace between the terminals).
     *
     * <p>{@code
     * trace ::= ['/'] (frame '/')* [frame [reference]] | reference | array-index+
     * frame ::= identifier | index
     * reference ::= (':in:' | ':out:') identifier array-index*
     * array-index ::= ':' index
     * }
     *
     * <p>The terminals are {@code identifier}, {@code index}, the slash (/), {@code ':in:'}, {@code ':out':},
     * and {@code ':'}.
     * An {@code identifier} must be a valid Java identifier according to
     * {@link javax.lang.model.SourceVersion#isIdentifier(CharSequence)}, which is not a keyword according to
     * {@link javax.lang.model.SourceVersion#isKeyword(CharSequence)}. An {@code index} must be a non-negative integer.
     */
    @Override
    String toString();
}
